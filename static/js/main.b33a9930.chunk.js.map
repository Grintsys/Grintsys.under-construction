{"version":3,"sources":["logo4.png","19728.png","components/NavToggle.js","components/BodyMain.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavToggle","Navbar","fixed","collapseOnSelect","expand","bg","variant","Brand","id","Toggle","aria-controls","Collapse","Nav","className","Link","React","Component","BodyMain","href","src","logo","role","aria-pressed","banner","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kIAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,qOCwB5BC,E,iLAhBP,OACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,MAAMC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QAC/D,kBAACL,EAAA,EAAOM,MAAR,CAAcC,GAAG,UAAjB,eACA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,0BAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBH,GAAG,yBAChB,kBAACI,EAAA,EAAD,CAAKC,UAAU,YACf,kBAACD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIE,KAAL,aACA,kBAACF,EAAA,EAAIE,KAAL,iBACA,kBAACF,EAAA,EAAIE,KAAL,uB,GAXAC,IAAMC,W,0CC+BfC,E,iLA7BP,OACI,yBAAKT,GAAG,UAAUK,UAAU,4BACxB,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aACX,uBAAGK,KAAK,wBAAuB,yBAAKC,IAAKC,IAAMP,UAAU,kBACzD,uBAAGL,GAAG,SAASK,UAAU,oBAAzB,SACA,wBAAIA,UAAU,mBAAd,gCACA,uBAAGA,UAAU,kBAAb,+FACA,uBAAGK,KAAK,uBAAuBV,GAAG,WAAWa,KAAK,SAASR,UAAU,yBAAyBS,eAAa,QAA3G,kBACA,wBAAIT,UAAU,oBAAd,gCACA,yBAAKL,GAAG,iBAAiBK,UAAU,qCAC/B,uBAAGK,KAAK,sCAAqC,uBAAGL,UAAU,gCAC1D,uBAAGK,KAAK,4DAA2D,uBAAGL,UAAU,wBAChF,uBAAGK,KAAK,oCAAmC,uBAAGL,UAAU,iCAIpE,yBAAKL,GAAG,cAAcK,UAAU,kBAC5B,yBAAKL,GAAG,aAAaW,IAAKI,IAAQV,UAAU,eAGpD,4BAAQA,UAAU,oBACd,4D,GAzBGE,IAAMC,WCUdQ,MATf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b33a9930.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo4.d9de8111.png\";","module.exports = __webpack_public_path__ + \"static/media/19728.5589ad77.png\";","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nclass NavToggle extends React.Component {\n    render() {\n        return (\n            <Navbar fixed=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand id=\"client\">Client Name</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\"></Nav>\n                    <Nav>\n                        <Nav.Link>Home</Nav.Link>\n                        <Nav.Link>Features</Nav.Link>\n                        <Nav.Link>Pricing</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        )\n    }\n}\nexport default NavToggle;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport logo from '../logo4.png';\nimport banner from '../19728.png'\n\nclass BodyMain extends React.Component {\n    render() {\n        return (\n            <div id=\"content\" className=\"card px-5 bg-transparent\">\n                <div className=\"row no-gutters\">\n                    <div className=\"col-md-5\">\n                        <div className=\"card-body\">\n                            <a href=\"http://grintsys.com/\"><img src={logo} className=\"card-img-top\"></img></a>\n                            <p id=\"title1\" className=\"font-weight-bold\">Oops!</p>\n                            <h1 className=\"card-title pt-1\">Sitio Web En Construcción</h1>\n                            <p className=\"card-text pt-2\">!Este sitio web se encuentra en construcción, vuelve pronto y tendremos los que buscas!.</p>\n                            <a href=\"http://grintsys.com/\" id=\"cont-btn\" role=\"button\" className=\"btn btn-primary active\" aria-pressed=\"true\">Contáctanos</a>\n                            <h5 className=\"text-center pt-5\">Conoce más sobre nosotros</h5>\n                            <div id=\"social-network\" className=\"row d-flex justify-content-center\">\n                                <a href=\"https://www.facebook.com/grintsys/\"><i className=\"fa fa-facebook-square px-2\"></i></a>\n                                <a href=\"https://www.youtube.com/channel/UCCr2Se-J173l36beanfXm0w\"><i className=\"fa fa-youtube px-2\"></i></a>\n                                <a href=\"https://github.com/orgs/Grintsys\"><i className=\"fa fa-github-square px-2\"></i></a>\n                            </div>\n                        </div>\n                    </div>\n                    <div id=\"content-img\" className=\"col-md-7 h-100\">\n                        <img id=\"bg-content\" src={banner} className=\"card-img\"></img>\n                    </div>\n                </div>\n                <footer className=\"text-center pt-2\">\n                    <p>Copyright © GRINTSYS</p>\n                </footer>\n            </div>\n        )\n    }\n}\nexport default BodyMain;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport NavToggle from './components/NavToggle';\nimport './App.css';\nimport BodyMain from './components/BodyMain';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavToggle/>\n      <BodyMain/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}